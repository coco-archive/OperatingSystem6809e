
*-OS PART 3-*
*UTILITY ROUTINES*

**PUBLIC FILE VARS**
 PUBLIC PROCZ
 PUBLIC EXECS
 PUBLIC PULLS
 PUBLIC PUSHS
 PUBLIC EXPND

**EXTERNAL VARS**
COMDSK EXT
PIPE EXT
FILE EXT
PIPLST EXT
OPNSEM EXT
PLIST EXT
FILSEM EXT
TOPPCB EXT
RUN EXT
OFT EXT
DSKREQ EXT
SCRLOC EXT
DEVTAB EXT
DSKPIN EXT
RQ EXT
AN EXT
DDH EXT
DDORG EXT
EXIT EXT

**OPEN FILE TABLE**
FST    EQU 0   R/W
FNAME  EQU 1   NAME
FDRIVE EQU 12  DRIVE
FGRAN  EQU 13  GRANULE
FLAST  EQU 14  #BYTES LAST SECTOR
FNUM   EQU 16  #FILE NUMBER
FBYTE  EQU 17  POINTER TO BUFFER
FNEXT  EQU 19  NEXT ENTRY
FBUFF  EQU 21  OFT BUFFER
FLEN   EQU FBUFF+2560

**DIR TABLE**
DRFN   EQU 0   NAME
DREXT  EQU 8   EXTENSION
DRFT   EQU 11  FILE TYPE
DRFM   EQU 12  FILE MODE
DRGRN  EQU 13  1ST GRAN
DRBYTE EQU 14  #BYTES LAST SECTOR
DRFUT  EQU 16  EXPANSION

**IO REQ BLOCK**
IODEV  EQU 0   DEVICE
IORW   EQU 1   READ/WRITE
IOADD  EQU 2   & TO START IO ON
IOLEN  EQU 4   #BYTES TO DO
IONAME EQU 6   NAME OF FILE
IODR   EQU 17  DRIVE# IF USED
IOL    EQU IODR+1

**PIPES**
PPNUM  EQU 0  PIPE NUMBER
PPRD   EQU 1  READER'S PIN
PPWT   EQU 3  WRITER'S PIN
PPEMP  EQU 5  EMPTY SEMP
PPFULL EQU 7  FULL SEMP
PPMUTX EQU 9  MUTX ON PIPE
PPCLS  EQU 11 OPEN=0 CLOSED=$FF
PPNEXT EQU 12 NEXT PIPE IN LIST
PPPCB  EQU 14 CHAINED TO PCB
PPPTR  EQU 16 BUFFER POINTER
PPBUFF EQU 18 BUFFER
PPBFLN EQU 16 LENGTH OF BUFFER
PPLEN  EQU PPBUFF+PPBFLN+2
**PCB**
PNAM   EQU 0
PPIN   EQU 8
PNXT   EQU 10
PSTK   EQU 12
PHED   EQU 14
PSEM   EQU 16
PCNT   EQU 18
PST    EQU 20
PCHN   EQU 22
PMSG   EQU 24
PREC   EQU 26
PXE    EQU 28
PXF    EQU 36
PRD    EQU 44
PWT    EQU 46
PJOB   EQU 48
PEND   EQU 50
PAREA  EQU 128
PL     EQU 128

**DISK READ/WRITE**
* +0 OPERATION
*    1=NOOP 2=READ 3=WRITE
* +1 DRIVE 0-3
* +2 TRACK 0-34
* +3 SECTOR 1-18
* +4 BUFFER ADDRESS (2 BYTES)

**MSG RECEIVER OFFSETS**
TSEND  EQU 0   SENDER'S PIN
TL     EQU 2   LENGTH
TMSG   EQU 4   MSG LOC AFTER REC'ED

**RETURN OF IO OPERATION**
ERRRET EQU 0   ERROR
LENRET EQU 1   # BYTES COMPLETED

CREATE EQU 0   CREATE PROCESS
DEST   EQU 1   DESTROY PROCESS
GET    EQU 2   GET MEMORY
FREE   EQU 3   FREE MEMORY
ALSEM  EQU 4   ALOCATE SEMP
FRSEM  EQU 5   FREE SEMP
P      EQU 6   MUTEX P OPERATOR
V      EQU 7   MUTEX V OPERATOR
SEND   EQU 8   SEND A MESSAGE
REC    EQU 9   RECEIVE A MESSAGE
WRITE  EQU 10  WRITE TO SCREEN
READ   EQU 11  READ FROM KEYS
DISK   EQU 12  ACCESS DISK
IO     EQU 13  CALL I/O WITH IO REQ BLOCK
OPENRD EQU 14  OPEN FOR READING
OPENWT EQU 15  OPEN FOR WRITING
RREAD  EQU 16  READ FILE
CLOSE  EQU 17  CLOSE FILE
GOR    EQU 18  GENERAL READ
GOW    EQU 19  GENERAL WRITE
EXEC   EQU 20  EXECECUTE A FILE
PULL   EQU 21  GET 1ST SPACE
PUSH   EQU 22  GET 1ST 'SPACE

* AT X FINDS 1ST SPACE *
PULLS  LDA  ,X     GET STARTING LOC
       CMPA #32    SPACE?
       BEQ  PULHAV YES DONE
       LEAX 1,X    ELSE GET NEXT
       BRA  PULLS  LOOP
PULHAV LDU  RUN    SAVE RETURN
       LDU  PSTK,U OF X IN OLD X
       STX  4,U
       LBRA EXIT   DONE

* AT X FIND FIRST NON BLANK *
PUSHS  LDA  ,X     GET STARTING VAL
       CMPA #32    SPACE?
       BNE  PUSHAV NOT A SPACE THEN STOP
       LEAX 1,X    ELSE GET NEXT AND CONTINUE
       BRA  PUSHS  LOOP
PUSHAV LDU  RUN    FIX NEW X
       LDU  PSTK,U INTO STACK
       STX  4,U
       LBRA EXIT   DONE

*----------------------------
* EXEC : LOADS AND EXECUTES
*    A FILE WITH NAME AND
*     PARAMS AT X
*----------------------------

DIR    RMB  2816     HOLDS DIR
KILLIT RMB  2        SAVE LOC OF DIR BUFF
PARAMS FDB  128      HOLDS PARAMS
COMCPY RMB  256      HOLDS COMMANDS+PARAMS
CRPIN  RMB  2        PIN OF COMMAND
CRNAME FCC  /!AN EXEC/  NAME OF COMMAND
CRADD  RMB  2        ADDRESS OF COMMAND PROGRAM
XTEMP  RMB  2         SAVE FOR REG X
XCNT   RMB  1         COUNTER
KHH    RMB  8         DISK REQ BLOCK
COM    RMB  6         HOLDS COMMAND
OPNRQ  RMB  8         HOLDS FILENAME TO OPEN
       FCC  /EXE/
COMDRV RMB  1         DRIVE TO LOOK FOR COMMANDS

EXECS  TFR  X,U     ADD OF COMM=U
       LDA  #2      READ DISK
       STA  KHH
       LDA  COMDSK  GET DIRVE OF COMM DISK
       STA  KHH+1
       LDA  #17     READ DIR
       STA  KHH+2
       LDA  #2      AT SECTOR 2
       STA  KHH+3
       LDX  #DIR    GET ADD OF BUFF
       STX  KHH+4

DLPR   LDA  #DISK
       LDX  #KHH    DO REQUEST
       SWI
       INC  KHH+3   NEXT SECTOR
       LDX  KHH+4
       LEAX 256,X   NEXT BUFF LOC
       STX  KHH+4
       LDA  KHH+3
       CMPA #12     LAST DIR SECTOR
       BNE  DLPR    NO

       LDX  KHH+4    YES ADJUST BUFF ADD
       LEAX -2560,X  AND SAVE INTO
       STX  KHH+4    REQ BLOCK AGAIN
       LEAX 256,X    ADJUST TO DIR ENTRIES
EXST   CLRB          FOR COMPARING NAMES
EXLP   LDA  B,U
       CMPA B,X      COMPARE NAMES OF FILES
       BNE  EXNEXT   IF NOT SAME GET NEXT
       CMPA #32      IF SPACE THEN DONE
       BEQ  EXGOT
       CMPA #13      IF RETURN THEN DONE
       BEQ  EXGOT
       INCB          ELSE NEXT CHAR
       CMPB #8       IF 8 CHARS COMPARE THEN EQU
       BEQ  EXGOT
       BRA  EXLP     ELSE COMP NEXT CHAR

EXNEXT LEAX 32,X    GET NEXT ENTRY
       LDA  ,X      IS IT END OF LIST?
       CMPA #255    YES
       LBEQ EXERR   QUIT
       TSTA         IF IT EMPTY?
       BEQ  EXNEXT  YES, TRY AGAIN
       BRA  EXST    ELSE COMPARE ON THIS FILE

EXGOT  LDA  8,X     IS EXTENSION OF FILE
       CMPA #69
       LBNE EXNEXT   E
       LDA  9,X
       CMPA #88      X
       LBNE EXNEXT
       LDA  10,X
       CMPA #69      E?
       LBNE EXNEXT   NO, TRY AGAIN

       LDB  #0       YES,COPY FN INTO REQ BLOCK
       LDY  #OPNRQ
CPYX   LDA  B,X
       STA  B,Y
       INCB        COPY 8 BYTES
       CMPB #8
       BNE  CPYX
       LDA  COMDSK  GET COMMAND DRIVE#
       STA  COMDRV  SAVE IN RQ

       LDB  #0       COPY NAME INTO
       LDY  #CRNAME+1
CPYZ   LDA  B,X     PROCESS CREAT CALL
       STA  B,Y
       INCB
       CMPB #7      BUT ONLY 1ST 7 BYTES
       BNE  CPYZ

       LDY  #OPNRQ
       LDB  #2      OPEN COMMAND
       LDA  #OPENRD
       SWI
IDJ    INC  1026
       TSTA        IF OPEN ERR THEN HANG UP
       BNE  IDJ    CUZ SOMETHING IS VERY WRONG

       LDY  KHH+4  GET FAT
       LDA  13,X   GET 1ST GRAN
       CLR  XCNT   CLEAR COUNTER
XGRN   LDB  A,Y    COUNT # GRANULES REQUIRED
       CMPB #$C0   LAST GRAN?
       BGE  DNLEN  YES
       INC  XCNT   NO ONE MORE
       TFR  B,A    SAVE LAST GRAN
       BRA  XGRN   LOOP

DNLEN  ANDB #$3F  COMPUTE LENGTH NEEDED
       LDA  #16   TO HOLD THE COMM
       MUL        FILE
       LDA  #16
       MUL
ADDLO  TST  XCNT   IS FILE NOT EVEN A GRAN?
       BEQ  GRNLT  YES!
       ADDD #2304  ELSE FOR EACH GRAN ADD
       DEC  XCNT   GRAN LENGTH TO TOTAL
       BRA  ADDLO  LOOP

GRNLT  ADDD 14,X   ADD BYTES IN LAST GRAN
       ADDD #2304  ADD ADDITIONAL GRAN
       STX  XTEMP  SAVE IN TEMP
       TFR  D,X    GET ANY BLOCK
       LDA  #GET   TO HOLD REQ
       LDB  AN
       SWI
       STX  CRADD   SAVE IN COMMAND ADDRESS
       LDX  #CRNAME  CREATE PROCESS FOR COMMAND
       LDA  #CREATE
       SWI
       STX  CRPIN    SAVE PIN
       LDA  #2        BUILD IO REQ BLOCK
       STA  IODEV+COM  TO READ IN FILE
       CLR  IORW+COM   READ
       LDX  CRADD     FIX BUFF ADD
       STX  IOADD+COM
       LDX  #128       READ 128 BYTES AT A TIME
       STX  IOLEN+COM

XREAD  LDA  #IO      READ IN 128 BYTES OF COMM
       LDY  #COM
       SWI
       TSTA          END OF FILE?
       BNE  XCLS       YES
       LDX  COM+IOADD NO INC THE BUFF ADD
       LEAX 128,X
       STX  COM+IOADD
       BRA  XREAD     READ NEXT BLOCK

XCLS   LDD  #$2003  =BRA PAST FILE HEADER
       LDY  CRADD   SAVE IN START OF POGRAM
       STD  ,Y       SO IT BRANCHES OVER HEADER
       LDA  #CLOSE   GARBAGE
       LDB  #2
       LDY  #OPNRQ   CLOSE THE COMMAND FILE
       SWI
HUE    INC  1027
       TSTA         DID CLOSE WORK
       BNE  HUE     IF NOT THEN HANG UP MACHINE
       TFR  U,X
       LDA  #PULL   FIND START OF
       SWI
       LDA  #PUSH   PARAMETER LIST
       SWI

       LDY  #COMCPY
       CLRB          COPY PARAMETER LIST INTO
XC25   LDA  B,X     A MESSGAE
       STA  B,Y
       INCB
       CMPB #128   LEN=128
       BNE  XC25
       LDY  #PARAMS SEND PARAMS
       LDX  CRPIN   TO THE PROCESS
       LDA  #SEND   JUST CREATED
       SWI
       CLRB         ERRS=0
       BRA  DONOW   RETURN
EXERR  LDB  #255    ERROR!
DONOW  LDX  RUN
       LDX  PSTK,X  RETURN ERROR CODE IN A
       STB  1,X
       LBRA EXIT   DONE
*
*EXPAND:FILE NAME
* TO PAD WITH BLANKS
* AND MAKE IT 11 CHARS
* LONG
*
SAVEA  RMB  1   TEMP

EXPND  CLRB
       LDA  #8
       STA  SAVEA
EXPLP  LDA  B,X
       CMPA #46    "."
       BEQ  TRANS
       INCB
       DEC  SAVEA
       BMI  EXQUIT
       BRA  EXPLP
TRANS  LDA  SAVEA
       LEAX B,X
       LEAU A,X
       LDB  3,X
       STB  3,U
       LDB  2,X
       STB  2,U
       LDB  1,X
       STB  1,U
CLLP   TSTA
       BEQ  EXDONE
       LDB  #32
       STB  ,X+
       DECA
       BRA  CLLP
EXDONE LDB  1,U
       STB  0,U
       LDB  2,U
       STB  1,U
       STB  1,U
       LDB  3,U
       STB  2,U
       LDB  #32
       STB  3,U
EXQUIT LBRA EXIT

************
*PROCZ:RUN *
* RETURNS
* POINTER
* TO ENTIRE
* LIST OF
* PCBS...
************
PROCZ  LDX  RUN
       LDX  PSTK,X
       LDU  PLIST
       STU  4,X
       LBRA EXIT

  END

