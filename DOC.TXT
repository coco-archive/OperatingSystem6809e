   SPECS FOR BT SERVICE CALLS

 --STRUCTURES USED FOR CALLS--

*IO REQUEST BLOCK*
LENGTH   OFFSET   FUNCTION
  1         0    SPECIFIES DEVICE
                 0=CONSOLE
                 1=RS232 (INACTIVE)
                 2=DRIVE
                 3=PIPE
  1         1    READ=0
                 WRITE=1
  2         2    ADDRESS TO READ OR WRITE BYTES
  2         4    LENGTH FOR READ OR WRITE
  11        6    NAME OF FILE WITH EXTENSION
                 (OR) PIN OF READER AND WRITER
                    FOR A PIPE
  1         17   IF FILE THEN DRIVE FILE IS ON

*MESSAGE RECEIVE OFFSETS*
LENGTH    OFFSET   FUNCTION
  2         0    PIN OF SENDER
  2         2    LENGTH OF MESSAGE
PREV PARAM  4    ACTUAL MESSAGE RECEIVED

*FOR CREATING A PROCESS*
LENGTH    OFFSET   FUNCTION
  8         0    NAME TO CALL PROCESS
  2         2    ADDRESS OF PROGRAM

*READ A SECTOR FROM DISK*
LENGTH    OFFSET   FUNCTION
  1         0    COMMAND:
                   2=READ
                   3=WRITE
  1         1    DRIVE TO DO READ/WRITE (0-3)
  1         2    TRACK
  1         3    SECTOR
  2         5    ADDRESS TO TO READ/WRITE ON DATA

--HOW TO CALL THE ROUTINES--
 LOAD REGISTER (A) WITH NUMBER
 OF SWI ROUTINE AND EXECUTE A
 SWI (SOFTWARE INTERRUPT).

    CREATE #0
CREATES A NEW PROCESS
 INPUT:
REGISTER X POINTS AT A CREATE BLOCK (SEE ABOVE)
 OUTPUT:
REGISTER X IS THE PIN OF THE CREATED PROCESS

    DESTROY #1
DESTROYS THE RUNNING PROCESS
NO REGISTERS USED; CALLED BY A PROCESS IN ORDER
TO DESTROY ITSELF

    GET #2
ALLOCATES MEMORY TO A PARTICULAR PROCESS
 INPUT:
REGISTER X IS THE LENGTH OF THE REQUEST IN BYTES
REGISTER B IS A CHARACTER INDICATING THE TYPE
    B="A"  ANY
      "P"  PCB
      "M"  MESSAGE
      "S"  SEMAPHORE
      "I"  IO REQUEST BLOCK
BAD INPUT RESULTS IN THE DESTRUCTION OF THE
CALLING PROCESS
 OUTPUT:
REGISTER X IS THE LOCATION OF THE MEMORY BLOCK
ALLOCATED

    FREE #3
FREES A MEMORY BLOCK IF ONE IS ALLOCATED AT A
SPECIFIED LOCATION
 INPUT:
REGISTER X POINTS TO THE MEMORY BLOCK TO FREE
BAD INPUT RESULTS IN DESTRUCTION OF CALLING
PROCESS

    ALLOCATE SEMAPHORE #4
BUILDS A SEMAPHORE FOR THE CALLING PROCESS
SET TO SOME INITIAL VALUE
 INPUT:
REGISTER X=INITIAL VALUE OF SEMAPHORE
 OUTPUT:
REGISTER X-LOCATION OF SEMAPHORE (USED FOR P,V)

    FREE SEMAPHORE #5
FREES A SEMAPHORE IF ONE EXISTS AT A SPECIFIED
ADDRESS.
 INPUT:
REGISTER X=LOCATION OF A SEMAPHORE -OWNED- BY
CALLER
BAD INPUT RESULTS IN DESTRUCTION

    P ON SEMAPHORE OR "DOWN" #6
MUTUAL EXCLUSION PRIMITIVE, SUBTRACTS ONE FROM
VALUE ON SEMAPHORE AND IF VALUE IS ALREADY 0 THEN
BLOCKS PROCESS
 INPUT:
REGISTER X=LOCATION OF SEMAPHORE

    V ON SEMAPHORE OR "DOWN" #7
MUTUAL EXCLUSION PRIMITIVE, ADDS ONE TO VALUE
OF SEMAPHORE AND IF VALUE IS 0 AND THERE ARE
BLOCKED PROCESSES THEN ALLOW ONE PROCESS TO
BECOME READY
 INPUT:
REGISTER X=LOCATION OF SEMAPHORE

    SEND A MESSAGE TO ANOTHER PROCESS #8
SENDS A VARIABLE LENGTH CONTIGUOUS GROUP OF
BYTES TO A PROCESS FOR RECEIVING
 INPUT:
REGISTER X=PIN OF PROCESS TO SEND TO
REGISTER Y=ADDRESS OF 2 BYTE  MESSAGE LENGTH
                      AND ACTUAL MESSAGE
BAD INPUT CAUSES DESTRUCTION OF CALLER
 OUTPUT:
REGISTER X=0 IF NO ERRORS

    RECEIVE MESSAGE #9
-WAITS- FOR ANY MESSAGE RETURNING THE ADDRESS OF
A MESSAGE RECEIVE BLOCK AFTER A MESSAGE IS SENT
 OUTPUT:
REGISTER X=ADDRESS OF MESSAGE RECEIVE BLOCK

    WRITE TEXT TO SCREEN #10
WRITES SOME DATA TO THE SCREEN
 INPUT:
REGISTER X=ADDRESS OF DATA TO WRITE
REGISTER B=NUMBER OF BYTES TO WRITE

    READ DATA FROM KEYBOARD #11
READS DATA FROM KEYBOARD INTO A MEMORY
LOCATION
 INPUT:
REGISTER X=LOCATION TO READ DATA INTO
REGISTER B=NUMBER OF BYTES TO READ

    READ/WRITE 256 BYTE SECTOR (DISK) #12
THIS SERVICE CALL READS AND WRITES A 256 BYTE
SECTOR TO OR FROM DISK
 INPUT:
REGISTER X=POINTS TO A DISK SECTOR READ/WRITE                 BLOCK
 OUTPUT:
REGISTER A=ERROR CODE, IF NOT=0 THEN ERROR

    REQUEST INPUT/OUTPUT #13
IT WILL PERFORM AN INPUT OR OUTPUT FUNCTION
FOR THE CONSOLE, DRIVE OR A PIPE
 INPUT:
REGISTER Y=THE LOCATION OF AN I/O REQUEST BLOCK
           DESCRIBED ABOVE

    OPEN A DEVICE FOR READING #14
SERVICE USED TO OPEN ANY DEVICE, MUST BE DONE
BEFORE I/O CAN OCCUR ON FILES OR PIPES
 INPUT:
REGISTER B=DEVICE NUMBER 0-3
REGISTER Y=ADDRESS OF FILENAME/EXTENSION/DRIVE
           (OR) PIN OF READER AND WRITER FOR PIPES
 OUTPUT:
REGISTER A=255 IF ERROR
          =0 IF NO ERROR

    OPEN A DEVICE FOR WRITING #15
SERVICE OPENS A DEVICE FOR WRITING, MUST BE DONE
BEFORE ANY I/O FOR FILES AND PIPES
 INPUT:
REGISTER B=DEVICE NUMBER 0-3
REGISTER Y=ADDRESS OF FILENAME/EXTENSION/DRIVE
           (OR) ADDRESS OF READ PIN AND WRITE PIN
            FOR PIPES
 OUTPUT:
REGISTER A=255 IF ERROR
          =0 IF NO ERROR

    SWI #16 IS DEFUNCT

    CLOSE A DEVICE #17
CLOSES A SPECIFIED DEVICE.
 INPUT:
REGISTER B=DEVICE NUMBER 0-3
REGISTER Y=ADDRESS OF FILENAME/EXTENSION/DRIVE
           (OR) PIN OF READER AND WRITER FOR PIPES
 OUTPUT:
REGISTER A=255 IF ERROR
          =0 IF NO ERROR

    GENERAL OPEN FOR READ #18
OPENS A DEVICE AS WELL AS SETTING
IO FLAGS IN PCB SO ANY REFERENCE
MADE TO DEVICE 255 NOW MAP TO THE
DEVICES AND FILES SET IN THE PCB
 INPUT:
REGISTER B=DEVICE NUMBER 0-3
REGISTER Y=ADDRESS OF FILENAME/EXTENSION/DRIVE
           (OR) PIN OF READER AND WRITER FOR PIPES
 OUTPUT:
REGISTER A=255 IF ERROR
          =0 IF NO ERROR

    GENERAL OPEN FOR READ #19
OPENS A DEVICE AS WELL AS SETTING
IO FLAGS IN PCB SO ANY REFERENCE
MADE TO DEVICE 255 NOW MAP TO THE
DEVICES AND FILES SET IN THE PCB
 INPUT:
REGISTER B=DEVICE NUMBER 0-3
REGISTER Y=ADDRESS OF FILENAME/EXTENSION/DRIVE
           (OR) PIN OF READER AND WRITER FOR PIPES
 OUTPUT:
REGISTER A=255 IF ERROR
          =0 IF NO ERROR

    EXECUTE A COMMAND FILE #20
THIS SERVICE LOADS AND EXECUTES A RELOCATEABLE
COMMAND FILE, FILE MUST HAVE EXTENSION 'EXT'
 INPUT:
REGISTER X=ADDRESS OF STRING WITH A COMMAND
NAME (MAX 8 CHARS) WHICH IS ON THE DISK
POSSIBLY FOLLOWED BY A PARAMETER LIST OF SOME
KIND, EACH PARAMATER LIST IS INDIVIDUAL FOR
THE COMMAND
 OUTPUT:
REGISTER A=ERROR CODE: 0=NO ERRORS  255=ERROR

    FIND NEXT BLANK ($20) IN STRING #21
FINDS THE 1ST BLANK IN A STRING RETURNING
A POINTER TO IT
 INPUT:
REGISTER X=LOCATION OF STRING
 OUTPUT:
REGISTER X=LOCATION OF BLANK CHAR
           AFTER INITIAL STRING

    FIND NEXT -NON- BLANK ($20) IN STRING #22
FINDS THE 1ST -NON- BLANK IN A STRING RETURNING
A POINTER TO IT
 INPUT:
REGISTER X=LOCATION OF STRING
 OUTPUT:
REGISTER X=LOCATION OF -NON- BLANK CHAR
           AFTER INITIAL STRING

    EXPAND A FILE NAME #23
EXPANDS A FILE NAME TO ITS FULL 11 BYTE LENGTH
IF IN COMPRESSED FORM:
 E.X.   FILE.DAT  IS COMPRESSED
        FILE    DAT   IS NOT COMPRESSED
 INPUT:
REGISTER X=LOCATION OF FILE TO EXPAND
 OUTPUT:
MEMORY AT X MAY BE MODIFIED

    RETURN POINTER TO ENTIRE PCB LIST #24
RETURNS POINTER WHICH LINKS ALL PCBS, CAN BE USED
FOR SEARCHING BUT IS USUALLY ONLY USED BY THE
SYSTEM
 OUTPUT:
X=LOCATION OF PCB LIST

FIN

